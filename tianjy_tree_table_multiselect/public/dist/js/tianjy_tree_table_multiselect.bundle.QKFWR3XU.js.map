{
  "version": 3,
  "sources": ["../../../../../apps/tianjy_tree_table_multiselect/tianjy_tree_table_multiselect/public/js/create.js", "../../../../../apps/tianjy_tree_table_multiselect/tianjy_tree_table_multiselect/public/js/controls.js", "../../../../../apps/tianjy_tree_table_multiselect/tianjy_tree_table_multiselect/public/js/tianjy_tree_table_multiselect.bundle.js"],
  "sourcesContent": ["// @ts-check\n\nimport { parse as parseOptions, getFilters } from './filter';\n\n/**\n *\n * @param {typeof frappe.ui.form.ControlLink} Class\n * @returns\n */\nexport default function create(Class) {\n\treturn class ControlTianjyTreeTableMultiSelect extends Class {\n\t\tmake_input() {\n\t\t\tsuper.make_input();\n\t\t\tthis.awesomplete.destroy();\n\t\t\tthis.$input.css('background-color', 'var(--control-bg)');\n\t\t\tthis.$input_area.addClass('form-control tree-table-multiselect');\n\t\t\tthis.$input.on('click', e => {\n\t\t\t\tthis.create_dialog();\n\t\t\t});\n\t\t}\n\t\tasync create_dialog(){\n\t\t\tconst me = this;\n\t\t\tconst dialog = new frappe.ui.Dialog({\n\t\t\t\ttitle: __(this.df.label),\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Filter',\n\t\t\t\t\t\tfieldtype: 'Data',\n\t\t\t\t\t\tfieldname: 'filter',\n\t\t\t\t\t\tonchange: async function () {\n\t\t\t\t\t\t\tconst filterString = this.get_value('filter');\n\t\t\t\t\t\t\tme.tree.jstree(true).search(filterString);\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tfieldtype: 'HTML',\n\t\t\t\t\t\tfieldname: 'html',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tprimary_action: values => {\n\t\t\t\t\tconst selected = this.tree.jstree(true).get_selected(true);\n\t\t\t\t\tconst link_field = this.get_link_field();\n\t\t\t\t\tconst deleteRows = this.rows.filter(item=>!selected.some(each=>each.id===item[link_field.fieldname]));\n\t\t\t\t\tconst createRows = selected.filter(item=>!this.rows.some(each=>each[link_field.fieldname]===item.id));\n\t\t\t\t\tthis.frm.doc[this.df.fieldname] = this.frm.doc[this.df.fieldname].filter(row =>!deleteRows.some(item=>item[link_field.fieldname]===row[link_field.fieldname]));\n\t\t\t\t\tthis.frm.set_value(this.df.fieldname, this.frm.doc[this.df.fieldname]);\n\t\t\t\t\tthis.frm.refresh_field(this.df.fieldname);\n\t\t\t\t\tconst value = this.get_multi_data(createRows);\n\t\t\t\t\tthis.parse_validate_and_set_in_model(value);\n\t\t\t\t\tdialog.hide();\n\t\t\t\t},\n\t\t\t});\n\t\t\tconst selectOptions = await this.get_select_options();\n\t\t\tthis.init_tree(dialog.fields_dict.html.$wrapper, selectOptions);\n\t\t\tdialog.show();\n\t\t}\n\t\tinit_tree(wrapper, data){\n\t\t\tthis.tree = wrapper;\n\t\t\tthis.tree.css('max-height', '600px');\n\t\t\tthis.tree.css('overflow', 'auto');\n\t\t\tthis.tree.jstree({\n\t\t\t\tcore:{\n\t\t\t\t\tdata:data,\n\t\t\t\t\tcheck_callback:true,\n\t\t\t\t},\n\t\t\t\tplugins:['checkbox', 'search'],\n\t\t\t\tsearch:{\n\t\t\t\t\tshow_only_matches:false,\n\t\t\t\t},\n\t\t\t\tcheckbox:{\n\t\t\t\t\tthree_state:false,\n\t\t\t\t\tkeep_selected_style:true,\n\t\t\t\t\ttie_selection:  true,\n\t\t\t\t\twhole_node:  true,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\trefresh_tree_data(options){\n\t\t\tthis.tree.jstree(true).settings.core.data = options;\n\t\t\tthis.tree.jstree(true).refresh();\n\t\t}\n\t\tasync get_select_options(filterString=''){\n\t\t\tconst doctype = this.get_options();\n\t\t\tif (!doctype) { return; }\n\t\t\tconst args = {\n\t\t\t\ttxt: filterString,\n\t\t\t\tdoctype: doctype,\n\t\t\t};\n\t\t\tconst res = await frappe.call({\n\t\t\t\ttype: 'POST',\n\t\t\t\tmethod: 'tianjy_tree_table_multiselect.tianjy_tree_table_multiselect.tianjy_tree_table_multiselect.get_select_options',\n\t\t\t\targs: args,\n\t\t\t});\n\t\t\tconst link_field = this.get_link_field();\n\t\t\treturn (res?.message||[]).map(item=>({\n\t\t\t\t...item,\n\t\t\t\tstate:{\n\t\t\t\t\topened:true,\n\t\t\t\t\tselected:this.value.some(each=>each[link_field.fieldname] === item.id),\n\t\t\t\t\tchecked:this.value.some(each=>each[link_field.fieldname] === item.id),\n\t\t\t\t},\n\t\t\t}));\n\t\t}\n\t\tget_multi_data(value) {\n\t\t\tif (!this.rows) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tconst link_field = this.get_link_field();\n\n\t\t\tfor (const item of value) {\n\t\t\t\tif (this.frm) {\n\t\t\t\t\tconst new_row = frappe.model.add_child(\n\t\t\t\t\t\tthis.frm.doc,\n\t\t\t\t\t\tthis.df.options,\n\t\t\t\t\t\tthis.df.fieldname,\n\t\t\t\t\t);\n\t\t\t\t\tnew_row[link_field.fieldname] = item.id;\n\t\t\t\t\tthis.rows = this.frm.doc[this.df.fieldname];\n\t\t\t\t} else {\n\t\t\t\t\tthis.rows.push({\n\t\t\t\t\t\t[link_field.fieldname]: item.id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tfrappe.utils.add_link_title(link_field.options, item.id, item.text);\n\t\t\t}\n\n\t\t\tthis._rows_list = this.rows.map(row => row[link_field.fieldname]);\n\t\t\treturn this.rows;\n\t\t}\n\t};\n\n\n}\n", "// @ts-check\n\nimport create from './create';\nfrappe.ui.form.ControlTianjyTreeTableMultiSelect = create(frappe.ui.form.ControlTableMultiSelect);\n", "import './controls';\n// import './formatters';\nfrappe.model.no_value_type.push('Tianjy Tree Table MultiSelect');\nfrappe.model.table_fields.push('Tianjy Tree Table MultiSelect');\n"],
  "mappings": "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",
  "names": []
}
